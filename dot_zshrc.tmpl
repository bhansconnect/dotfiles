# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Automatically setup zinit.
# Store in xdg data home if available.
# Else, store in ~/.local/share
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download zinit if not ready
if [ ! -d "$ZINIT_HOME" ]; then
  mkdir -p "$(dirname $ZINIT_HOME)"
  git clone git@github.com:zdharma-continuum/zinit.git $ZINIT_HOME
fi

source "${ZINIT_HOME}/zinit.zsh"

# install p10k
zinit ice depth=1; zinit load romkatv/powerlevel10k

# Path updates
export PATH="$HOME/go/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/Projects/roc/target/release:$PATH"
# export PATH="/opt/homebrew/opt/llvm/bin:$PATH"

# compinit and autocomplete setup
autoload compinit -Uz && compinit
if [ -x "$(command -v /opt/homebrew/bin/brew)" ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
  export LIBRARY_PATH="$LIBRARY_PATH:$(brew --prefix)/lib"
fi
if [ -x "$(command -v direnv)" ]; then
  eval "$(direnv hook zsh)"
fi
source <(COMPLETE=zsh jj)
eval "$(fzf --zsh)"
eval "$(zoxide init --cmd cd zsh)"

zinit load zsh-users/zsh-completions
zinit cdreplay -q
zinit load Aloxaf/fzf-tab

# Other plugins
zinit load zsh-users/zsh-syntax-highlighting
zinit load zsh-users/zsh-autosuggestions

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Keybinds
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

# Shared history
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# Completions styles
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:*' fzf-bindings 'ctrl-a:toggle-all'

# Nix
if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
  . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi
if [ -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
  . $HOME/.nix-profile/etc/profile.d/nix.sh
fi
# End Nix
 
# Default programs
export EDITOR='hx'
export PAGER="less"
export LESS="-Rc"

# Aliases and functions
alias ls='ls --color'
alias hx="hx --log /dev/null"
ssh_terminfo () {
  infocmp -x | ssh ${@} -- tic -x -
}

{{- if not .personal }}
sm () {
  if [ -d "$HOME/Projects/modular/" ]; then
    source $HOME/Projects/modular/utils/start-modular.sh
  elif [ -d "$HOME/modular/" ]; then
    source $HOME/modular/utils/start-modular.sh
  else
    echo "could not find modular repo"
  fi
}

alias mb="$MODULAR_PATH/bazelw"
alias bb="mb build"
# alias bt="mb test"
alias br="mb run"

alias ib="ibazel -bazel_path $MODULAR_PATH/bazelw"
alias ibb="ib build"
alias ibt="ib test"
alias ibr="ib run"

alias bpy="br SDK:python --"
alias ibpy="ibr SDK:python --"

alias bf="br //:format"
alias bfpy="br //utils/bazel/lint:ruff-lint.fix; br //utils/bazel/lint:ruff-format.fix; br //utils/bazel/lint:mblack.fix"
{{- end }}

# Misc config
export CMAKE_GENERATOR=Ninja
export AFL_AUTORESUME=1
